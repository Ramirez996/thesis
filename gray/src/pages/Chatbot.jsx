import { useEffect, useState } from "react";
import "../chatbot/Chatbot.css";

// 1. RECEIVE THE NEW PROP: hybridRiskData
function Chatbot({ combinedScore, classification, hybridRiskData }) {
Â  const [visible, setVisible] = useState(false);
Â  const [resultMessage, setResultMessage] = useState("");
Â  const [adviceMessage, setAdviceMessage] = useState("");
Â  const [hybridMessage, setHybridMessage] = useState(""); // State for hybrid risk message

Â  useEffect(() => {
Â  Â  if (combinedScore !== undefined && classification) {
Â  Â  Â  setVisible(true);

Â  Â  Â  // Main result message
Â  Â  Â  const resultText = `Your test result: ${classification}(Score: ${combinedScore})`;

Â  Â  Â  // Dynamic response based on classification
Â  Â  Â  let adviceText = "";
Â  Â  Â  if (classification.toLowerCase().includes("severe")) {
Â  Â  Â  Â  adviceText =
Â  Â  Â  Â  Â  "It seems your symptoms are on the higher side. I encourage you to reach out to a mental health professional or someone you trust. Youâ€™re not alone, and support is available.";
Â  Â  Â  } else if (classification.toLowerCase().includes("moderate")) {
Â  Â  Â  Â  adviceText =
Â  Â  Â  Â  Â  "You may be experiencing moderate symptoms. Try relaxation, journaling, or talking to a trusted friend â€” it can help a lot!";
Â  Â  Â  } else {
Â  Â  Â  Â  adviceText =
Â  Â  Â  Â  Â  "Your results suggest mild or minimal symptoms. Keep up your good habits and continue taking care of your well-being!";
Â  Â  Â  }

Â  Â  Â  // 2. CREATE HYBRID RISK MESSAGE
Â  Â  Â  let hybridText = "";
Â  Â  Â  if (hybridRiskData) {
Â  Â  Â  Â  hybridText = `Hybrid Analysis: Your final risk level is ${hybridRiskData.risk_level}. (LR Score: ${hybridRiskData.lr_score}, BERT Score: ${hybridRiskData.bert_score}).`;
Â  Â  Â  }
      
Â  Â  Â  setResultMessage(resultText);
Â  Â  Â  setAdviceMessage(adviceText);
Â  Â  Â  setHybridMessage(hybridText); // Set the new message
Â  Â  }
Â  }, [combinedScore, classification, hybridRiskData]); // Include hybridRiskData in dependencies

Â  if (!visible) return null;

Â  return (
Â  Â  <div className="chatbot-floating-container">
Â  Â  Â  <div className="chatbot-message-box">
Â  Â  Â  Â  <p className="chatbot-text">{resultMessage}</p>
        
        {/* 3. DISPLAY THE HYBRID MESSAGE */}
        {hybridRiskData && (
          <p className="chatbot-text hybrid-analysis">{hybridMessage}</p>
        )}
        
Â  Â  Â  Â  <p className="chatbot-text">{adviceMessage}</p>
Â  Â  Â  </div>
Â  Â  Â  <div className="chatbot-icon">
Â  Â  Â  Â  ðŸ¤–
Â  Â  Â  </div>
Â  Â  </div>
Â  );
}

export default Chatbot;